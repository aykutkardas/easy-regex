{
  "lesson.regexForSeo.starter.title": "რეგულარული გამოსახულებები SEO-თვის",
  "lesson.regexForSeo.starter.description": "Regex-ი არის რეგულარული გამოსახულებების ნაკრები, რომელიც გამოიყენება სხვადასხვა მიმართულებით, განსაკუთრებით იმ ადამიანების მიერ, ვისაც საკუთარი პროდუქტიულობის გაზრდა სურს. რეგულარული გამოსახულებების SEO-თვის გამოყენების უპირატესობა იმაში მდგომარეობს, რომ იგი ამარტივებს დიდი (მასშტაბური) მონაცემების ანალიზს და ძლიერი ფილტრების შემუშავების პროცესს. თუკი Regex-ი თქვენთვის ახალია, გირჩევთ სწავლა დაიწყოთ `Regex 101` სახელმძღვანელოთი. \\n\\nდასაწყისისათვის, ქვემოთ მოცემულ Regex-ის ველში შეიყვანეთ ტექსტი `OK`, რათა გადახვიდეთ პირველ ეტაპზე და უფრო დეტალური განმარტებები მიიღოთ.",

  "lesson.regexForSeo.usage.title": "გამოყენების მაგალითები",
  "lesson.regexForSeo.usage.description": "რეგულარული გამოსახულებების SEO-თვის გამოყენება შეგიძლიათ ისეთ პლატფორმებზე, როგორებიცაა `Google Analytics`, `Google Data Studio`, `Google Sheets`, `Google Search Console`, `Ahrefs`, `Deepcrawl`, `Screaming Frog` და სხვა. ასევე, ხშირად გამოიყენება `.htaccess` და `robots.txt (regex-ის მაგვარი სინტაქსი)` ფაილებში.\\n\\nქვემოთ მოცემულია Regex-ის მარტივი ნიმუში, რომელიც შესაბამისობაში მოვა ჩამონათვალში შემავალ მხოლოდ იმ ტექსტებთან, რომლებიც იწყება `Google`-ით.",

  "lesson.regexForSeo.basics.title": "საწყისები",
  "lesson.regexForSeo.basics.description": "მოდი, განვიხილოთ Regex-ის რამდენიმე ისეთი ნიმუში, რაც ხშირად გამოგადგებათ პრაქტიკაში. იმისათვის, რომ უკეთ გაერკვეთ მაგალითებში მოყვანილი გამოსახულებების მუშაობის პრინციპებში, გირჩევთ გადახედოთ `Regex 101` სახელმძღვანელოს. ქვემოთ მოცემულ ველში შეიყვანეთ სიტყვა `Yes` და გადავიდეთ საქმეზე.",

  "lesson.regexForSeo.or.title": "„ან“ ოპერატორი `|`",
  "lesson.regexForSeo.or.description": "„ან“ ოპერატორს `|` ვიყენებთ რამდენიმე ალტერნატიული ქვეგამოსახულების განსაზღვრის მიზნით. მაგალითისათვის, დაწერეთ რეგულარული გამოსახულება, რომელიც ქვემოთ მოცემული ტექსტიდან ამოკრებს სიტყვებს `seo` და `regex`. ამისათვის, Regex-ის ველში შეიყვანეთ აღნიშნული სიტყვები და ერთმანეთისაგან გამოყავით „ან“ ოპერატორით `|`.",

  "lesson.regexForSeo.optional.title": "პირობითობის აღმნიშვნელი ოპერატორი `?`",
  "lesson.regexForSeo.optional.description": "ამ ოპერატორს ვიყენებთ იმის აღსანიშნავად, რომ ესა თუ ის სიმბოლო ან გამოსახულება არასავალდებულოა. ვთქვათ გვჭირდება ტექსტის გაფილტვრა ისე, რომ ამოვკრიბოთ `http` და `https` სიტყვები. რა თქმა უნდა, შეგვიძლია ამ მიზნით „ან“ ოპერატორის `|` გამოყენება, მაგრამ აღნიშნულ შემთხვევაში, როცა სიტყვები თითქმის იდენტურია, არსებობს უკეთესი გზაც.\\n\\nმოცემულ მაგალითში, ასო `s` არის პირობითი (არასავალდებულო). Regex-ის ველში, ასო `s`-ის შემდეგ დაამატეთ კითხვის ნიშანი `?`.",

  "lesson.regexForSeo.any.title": "ნებისმიერი სიმბოლო `.*`",
  "lesson.regexForSeo.any.description": "Regex-ში წერტილი `.` შესაბამისობაში მოდის ყველა სიმბოლოსთან ინტერვალის ჩათვლით. მაგრამ ეს შესაბამისობა ვრცელდება მხოლოდ ერთ სიმბოლოზე (და არა მთლიან ტექსტზე). ვარსკვლავის სიმბოლო `*` აღნიშნავს, რომ მის წინ მდებარე გამოსახულების დამთხვევა ტექსტში შეიძლება საერთოდ არ მოხდეს, ან ბევრჯერ მოხდეს. როდესაც ნახსენები ორი სიმბოლო (`.` და `*`) ერთად გამოიყენება, ეს იმას ნიშნავს, რომ `.`-ის შესაბამისობა გავრცელდება მთლიან ტექსტზე (და არა მხოლოდ ერთ სიმბოლოზე).\\n\\nქვემოთ, Regex-ის ველში, მოცემულია რამდენიმე საკვანძო სიტყვა. იმავე ველში, ინტერვალის შემდეგ დაამატეთ წერტილი და ვარსკვლავი `.*`, რათა შეადგინოთ გამოსახულება, რომელიც შესაბამისობაში მოვა ყველა ისეთ სტრიქონთან, რომელიც იწყება `how to write`-ით და არ აქვს მნიშვნელობა, როგორ გრძელდება.",

  "lesson.regexForSeo.contains.title": "შეიცავს",
  "lesson.regexForSeo.contains.description": "იმისათვის, რომ ტექსტი გავფილტროთ ამა თუ იმ სიტყვის ან ფრაზის შემცველობის მიხედვით, სასურველი სიტყვა ან ფრაზა უნდა მოვაქციოთ ორ `.*`-ს შორის (`.*` არის გამოსახულება, რომელიც ნებისმიერ სიმბოლოსთან მოდის შესაბამისობაში). მაგალითისათვის, Regex-ის ველში შეიყვანეთ `.*buy.*`, რათა ტექსტიდან ამოკრიბოთ ყველა ის სტრიქონი, რომელიც შეიცავს სიტყვას `buy`.",

  "lesson.regexForSeo.negated.title": "უარყოფილ სიმბოლოთა ნაკრები `[^abc]`",
  "lesson.regexForSeo.negated.description": "უარყოფილ სიმბოლოთა ნაკრებებს `[^]` ვიყენებთ იმ სიმბოლოების აღნიშვნისთვის, რომლებიც გვინდა, რომ უარვყოთ. ასეთი სიმბოლოები უნდა ჩავწეროთ კვადრატულ ფრჩხილებს შორის და თავსართის სახით დავურთოთ ახარისხების ნიშანი `^`. ქვემოთ მოცემულ ტექსტში გვაქვს როგორც `http`-ით, ისე `https`-ით დაწყებული სტრიქონები. რადგან `http` ფრაგმენტი ორივეგან გვხვდება, გამოსახულება შესაბამისობაში მოვა `https`-ით დაწყებულ სტრიქონებთანაც. ეს რომ ასე არ მოხდეს, Regex-ის ველში, ასო `p`-ს შემდეგ დაამატეთ `[^s]`, რათა მოხდეს ასო `s`-ის გამორიცხვა. შედეგად, გამოსახულება შესაბამისობაში მოვა მხოლოდ `http`-ით დაწყებულ სტრიქონებთან.",

  "lesson.regexForSeo.caret.title": "ახარისხების ნიშანი `^`",
  "lesson.regexForSeo.caret.description": "ვთქვათ გვაქვს URL-ების ჩამონათვალი და გვინდა, რომ ამოვკრიბოთ მხოლოდ ისეთი URL-ები, რომლებიც იწყება `http`-ით. მაგრამ `http` ფრაგმენტი URL-ის დასაწყისის გარდა, სხვა ადგილებშიც შეიძლება გვხდებოდეს (მაგალითად, შუაში ან ბოლოში). იმისათვის, რომ მხოლოდ ისეთი URL-ები ამოვკრიბოთ, რომლებიც იწყება `http`-ით, Regex-ის ველის დასაწყისში დაამატეთ ახარისხების ნიშანი `^`.",

  "lesson.regexForSeo.dollarAndEscape.title": "დოლარის ნიშანი `$` და უკან გადახრილი წილადის ხაზი `\\`",
  "lesson.regexForSeo.dollarAndEscape.description": "ისევ და ისევ, მოცემული გვაქვს URL-ების ჩამონათვალი. ამჯერად გვსურს, რომ ამოვკრიბოთ მხოლოდ ისეთი URL-ები, რომლებიც სრულდება `.htm`-ით.\\n\\nვინაიდან წერტილი არის სპეციალური სიმბოლო, რომელიც შესაბამისობაში მოდის ყველანაირ სიმბოლოსთან, უპირველეს ყოვლისა, წერტილის წინ უნდა დავამატოთ უკან გადახრილი წილადის ხაზი `\\`, რათა წერტილი `.` აღქმულ იქნეს, როგორც ჩვეულებრივი სიმბოლო. ეს „ხრიკი“ ვრცელდება ნებისმიერ სპეციალურ სიმბოლოზე (მაგ.: `*`, `+`, `?` და სხვ.).\\n\\nშემდგომ ამისა, გამოსახულების ბოლოში უნდა დავამატოთ დოლარის ნიშანი `$`. ამით აღვნიშნავთ, რომ ჩაწერილი გამოსახულება უნდა შეესაბამებოდეს ტექსტის დასასრულს (ესე იგი, ტექსტი უნდა ბოლოვდებოდეს `.htm`-ით).",

  "lesson.regexForSeo.limitation.title": "სიგრძის შეზღუდვა `{n}`",
  "lesson.regexForSeo.limitation.description": "შესაძლოა დაგჭირდეთ შედეგების ფილტრაცია მათში შემავალ სიმბოლოთა კონკრეტული რაოდენობის მიხედვით. მაგალითად, იმისათვის, რომ URL-ების ჩამონათვალიდან ამოკრიბოთ `35` სიმბოლოსაგან შემდგარი URL-ები, Regex-ის ველში, `.`-ის შემდეგ, ფიგურულ ფრჩხილებს `{}` შორის ჩაწერეთ სასურველი რიცხვი (ამ შემთხვევაში, `35`).",

  "lesson.regexForSeo.maxLimitation.title": "სიგრძის შეზღუდვა (მაქსიმუმი) `{n,m}`",
  "lesson.regexForSeo.maxLimitation.description": "იმისათვის, რომ URL-ების ჩამონათვალიდან ამოკრიბოთ ისეთი URL-ები, რომლებიც მაქსიმუმ `35` სიმბოლოსაგან შედგება, Regex-ის ველში, `.`-ის შემდეგ, ფიგურულ ფრჩხილებს `{}` შორის ჩაწერეთ სასურველი რიცხვები (მინიმუმი და მაქსიმუმი, ამ შემთხვევაში, `{1,35}`).",

  "lesson.regexForSeo.minLimitation.title": "სიგრძის შეზღუდვა (მინიმუმი) `{n,}`",
  "lesson.regexForSeo.minLimitation.description": "იმისათვის, რომ URL-ების ჩამონათვალიდან ამოკრიბოთ ისეთი URL-ები, რომლებიც მინიმუმ `35` სიმბოლოსაგან შედგება, Regex-ის ველში, `.`-ის შემდეგ, ფიგურულ ფრჩხილებს `{}` შორის ჩაწერეთ სასურველი რიცხვი (მინიმუმი) ბოლოში მძიმით (ამ შემთხვევაში, `{35,}`).",

  "lesson.regexForSeo.robots.title": "robots.txt (regex-ის მაგვარი სინტაქსი)",
  "lesson.regexForSeo.robots.description": "ქვემოთ მოცემულია `robots.txt` ფაილში Regex-ის მაგვარი სინტაქსის გამოყენების მაგალითი. აღნიშნულ მაგალითში განსაზღვრულია, რომ ბოტებმა არ უნდა მოახდინონ `pdf` გაფართოების მქონე ბმულების ინსპექტირება.",

  "lesson.regexForSeo.htaccess.title": ".htaccess",
  "lesson.regexForSeo.htaccess.description": "ქვემოთ მოცემულია Regex-ის გამოყენების მაგალითი `.htaccess` ფაილში. აღნიშნულ მაგალითში განსაზღვრულია, რომ `php` გაფართოების მქონე ყოველი ბმული უნდა გადამისამართდეს იმავე, ოღონდ `html` გაფართოების მქონე ბმულზე კონკრეტული სტატუსის კოდით (`301`).",

  "lesson.regexForSeo.outro.title": "შეჯამება",
  "lesson.regexForSeo.outro.description": "Regex-ის ცოდნა არის უნარი, რომელიც ზრდის პროდუქტიულობას ნებისმიერ პლატფორმაზე მუშაობისას, სადაც კი შესაძლებელია მისი გამოყენება. როგორც კი დაიწყებთ მის გამოყენებას და განივითარებთ აღნიშნულ უნარს, გაგიმარტივდებათ მრავალი რუტინული დავალების სწრაფად და ეფექტურად შესრულება, რაც დაგიზოგავთ დროს და ენერგიას. იმისათვის, რომ უკეთ გაიაზროთ Regex-ის ფუნდამენტური საკითხები, ეწვიეთ `Regex 101` სახელმძღვანელოს. ასევე შეგიძლიათ გამოიყენოთ `სავარჯიშო სივრცე` თქვენ მიერ შემუშავებული გამოსახულებების ტესტირებისათვის."
}
