{
  "examples.starter.title": "تمرین",
  "examples.starter.description": "اکنون زمان آن رسیده است که برای تثبیت آموخته هایمان ، کمی تمرین کنیم.",

  "examples.finish.title": "تمرین به پایان رسید!",
  "examples.finish.description": " ",

  "steps.starter.title": "مقدمه",
  "steps.starter.description": "Regex مخفف عبارت `Regular Expression` است. و برای یافتن یا مدریت الگوی خاصی در متن به ما کمک میکند. با تایپ کلمه `OK` در قسمت regex شروع کنید تا به مرحله اول بروید.",

  "steps.whatIsRegex.title": "عبارات منظم یا `Regex` چیست؟",
  "steps.whatIsRegex.description": "عبارات منظم، رشته ای از کاراکترها هستند که یک الگوی جستجو را بیان می کنند و اغلب `Regex` یا `Regexp` خوانده میشود. ریجکس به ویژه برای یافتن یا جایگزینی کلمات در متون استفاده میشود. و همچنین میتوانیم بررسی کنیم که آیا یک متن با الگویی که تنظیم کردیم ، مطابقت دارد یا خیر.\\n\\n برای مثال، فرض کنید فهرستی از نام فایل ها دارید و شما فقط میخواهید فایل هایی با پسوند `pdf` را پیدا کنید. برای این کار از الگو `^\\w+\\.pdf$` استفاده میکنیم. معنی نماد ها را در مراحل پیشرفته تر توضیح خواهیم داد.",

  "steps.basicMatchers.title": "تطبیق های ابتدایی",
  "steps.basicMatchers.description": "کاراکتر یا کلمه ای که می خواهیم پیدا کنیم مستقیماً نوشته می شود. دقیقا شبیه یک فرایند جستجو معمولی است. به عنوان مثال، برای یافتن کلمه `curious` در متن ، همان را در الگو تایپ میکنیم.",

  "steps.dotCharacter.title": "نقطه `.`: هر کارکتری",
  "steps.dotCharacter.description": "علامت نقطه `.` امکان انتخاب هر کاراکتری، از جمله کاراکترها و فاصله‌های خاص را می‌دهد. برای ادامه یک نقطه `.` را در قسمت regex تایپ کنید.",

  "steps.characterSet.title": "لیست کاراکترها `[abc]`",
  "steps.characterSet.description": "اگر لیستی از کارکتر ها داشته باشیم که بدانیم حداقل یکی از آن ها در الگوی ما وجود خواهند داشت ، آن ها را در پرانتز [] می نویسیم. برای مثال اگر بخواهیم تمامی کلمات متن زیر را بدست بیاوریم، باید کارکتر های `a` `e` `i` `o` `u` را در `[]` تایپ کنیم.",

  "steps.negatedCharacterSet.title": "لیست کاراکترهای منفی `[^abc]`",
  "steps.negatedCharacterSet.description": "برای پیدا کردن تمامی کلمات متن زیر بجز کلمات `ber` و `bor` باید از نماد `^` در داخل `[]` استفاده کنید. این نماد کارکتر هایی غیر از کارکترهای داخل براکت را انتخاب میکند.",

  "steps.range.title": "محدوده حروف`[a-z]`",
  "steps.range.description": "برای یافتن حروف در محدوده مشخص شده، حرف شروع و حرف پایانی در براکت `[]` با خط تیره بین آنها `-` نوشته می‌شود. این محدوده به حروف بزرگ و کوچک حساس است. عبارتی را تایپ کنید که تمام حروف کوچک بین `e` و `o` (به همراه خودشان) را انتخاب کند.",

  "steps.rangeNumber.title": "محدوده شماره`[0-9]`",
  "steps.rangeNumber.description": "برای یافتن اعداد در محدوده مشخص شده، عدد شروع و عدد پایانی در براکت `[]` با خط تیره `-` بین آنها نوشته می شود. عبارتی بنویسید که تمام اعداد بین `3` و `6` از جمله خودشان را انتخاب کند.",

  "examples.basicMatchers.title": "تمرین: تطبیق های ابتدایی",
  "examples.basicMatchers.description": "عبارتی را بنویسید که کلمات `of` را در متن انتخاب کند.",

  "examples.dotCharacter.title": "تمرین: هر کارکتری",
  "examples.dotCharacter.description": "عبارتی را برای انتخاب همه حروف، اعداد، فاصله و کاراکترهای خاص در متن تایپ کنید. عبارتی که تایپ میکنید باید با هر کارکتری مطابقت داشته باشد.",

  "examples.characterSet.title": "تمرین: لیست کارکتر ها",
  "examples.characterSet.description": "عبارتی را بنویسید که با تمامی کلمات در متن مطابقت داشته باشد. تنها کارکترهایی که تغییر میکنند حروف اول هستند.",

  "examples.negatedCharacterSet.title": "تمرین: لیست کاراکترهای منفی",
  "examples.negatedCharacterSet.description": "عبارتی را بنویسید که با هر چیزی غیر از کلمات `beor` و `beur` در متن مطابقت دارد. این کار را با استفاده از لیست کارکترهای منفی انجام دهید.",

  "examples.range.title": "تمرین: محدوده حروف",
  "examples.range.description": "عبارتی را بنویسید که حروف `g` تا `k` را در متن انتخاب کند.\\nخود حروف `g` و `k` نیز باید در این محدوده گنجانده شوند.",

  "examples.rangeNumber.title": "تمرین: محدوده اعداد",
  "examples.rangeNumber.description": "عبارتی را برای انتخاب اعداد `2` تا `7` در متن تایپ کنید.\\n`2` و `7` نیز باید در این محدوده گنجانده شوند.",

  "steps.repetitions.title": "تکرارها",
  "steps.repetitions.description": "برخی از کاراکترهای ویژه برای تعیین تعداد تکرار یک کاراکتر در متن استفاده می شود. این کارکتر های خاص عبارتند از بعلاوه `+` ، ستاره `*` و علامت سوال `?` .",

  "steps.asterisk.title": "ستاره `*`",
  "steps.asterisk.description": "ما یک ستاره `*` بعد از یک کاراکتر قرار می دهیم تا نشان دهد که این کاراکتر ممکن است اصلاً تکرار نشود و یا می تواند چندین بار تکرار شود. به عنوان مثال، نشان دهید که حرف `e` هرگز نباید در متن وجود داشته باشد یا اینکه میتواند هرچند بار ، پشت سرهم تکرار شود.",

  "steps.plusCharacter.title": "علامت بعلاوه `+`",
  "steps.plusCharacter.description": "برای نشان دادن اینکه یک کاراکتر می‌تواند حداقل یک یا چند بار تکرار شود، بعد از یک کاراکتر علامت مثبت `+` قرار می‌دهیم. برای مثال کلماتی را در متن زیر انتخاب کنید که کارکتر `e` در آنها حداقل یکبار تکرار شود.",

  "steps.questionMark.title": "علامت سوال `?`",
  "steps.questionMark.description": "برای نشان دادن اختیاری بودن یک کاراکتر، بعد از یک کاراکتر علامت سوال `?` قرار می دهیم. برای مثال کلماتی را در متن زیر انتخاب کنید که کارکتر `u` در آن اختیاری باشد.",

  "steps.quantifier.title": "آکولاد - 1",
  "steps.quantifier.description": "برای مشخص کردن تعداد معینی از وقوع (تکرار) یک کاراکتر، در انتهای کارکتر از آکولاد `{n}` به همراه تعداد دفعاتی که می‌خواهیم رخ دهد، استفاده میکنیم. برای مثال کلماتی را در متن زیر انتخاب کنید که دقیقا `2` عدد کارکتر `e` داشته باشند.",

  "steps.quantifierMin.title": "آکولاد - 2",
  "steps.quantifierMin.description": "برای مشخص کردن حداقل تعداد تکرار یک کارکتر باید دقیقا بعد از مشخص کردن تعداد حداقلی تکرار از علامت `,` استفاده کنید و آن را داخل آکولاد به این شکل `{n,}` قرار دهید. برای مثال کلماتی را انتخاب کنید که کارکتر `e` در آنها حداقل `3` بار یا بیشتر تکرار شود.",

  "steps.quantifierRange.title": "آکولاد - 3",
  "steps.quantifierRange.description": "برای مشخص کردن تعداد یک کاراکتر در یک محدوده اعداد مشخص، اعداد را داخل آکولاد به این شکل `{x,y}` مینوسیم. برای مثال کلماتی را در متن زیر انتخاب کنید که کارکتر `e` در آنها `1` الی `3` بار تکرار شود.",

  "examples.asterisk.title": "تمرین: ستاره `*`",
  "examples.asterisk.description": "از ستاره `*` برای نوشتن عبارتی استفاده کنید که هر کلمه ایی را انتخاب می کند که حرف `e` در آن ها به تعداد صفر یا بیشتر تکرار شده باشد.",

  "examples.plusCharacter.title": "تمرین: علامت بعلاوه `+`",
  "examples.plusCharacter.description": "عبارت را با استفاده از علامت مثبت `+` بنویسید تا کلماتی را انتخاب کنید که در آنها حرف `e` یک یا چند بار در متن آمده است.",

  "examples.questionMark.title": "تمرین: علامت سوال `?`",
  "examples.questionMark.description": "عبارتی را بنویسید که نشان می دهد حرف `n` در متن اختیاری است، استفاده کنید از علامت سوال `?`. بنابراین هردو کلمه `a` و `an` را میتوان انتخاب کرد.",

  "examples.quantifier.title": "تمرین: آکولاد - 1",
  "examples.quantifier.description": "عبارتی را با استفاده از آکولاد `{}` بنویسید که متن‌های حاوی اعدادی که `4` بار در کنار هم هستند را پیدا می‌کند. به یاد داشته باشید که محدوده `[0-9]` با یک عدد تک رقمی مطابقت دارد.",

  "examples.quantifierMin.title": "تمرین: آکولاد - 2",
  "examples.quantifierMin.description": "عبارتی را با استفاده از آکولاد `{}` بنویسید که متون حاوی حداقل `2` عدد را در کنار هم پیدا کند.",

  "examples.quantifierRange.title": "تمرین: آکولاد - 3",
  "examples.quantifierRange.description": "عبارتی را با استفاده از آکولاد `{}` بنویسید که متون حاوی حداقل `1` و حداکثر `4` عدد را در کنار هم پیدا کند.",

  "steps.grouping.title": "پرانتز `( )`: گروه بندی",
  "steps.grouping.description": "ما می توانیم یک عبارت را گروه بندی کنیم و از این گروه ها برای ارجاع یا اجرای برخی قوانین استفاده کنیم. برای گروه بندی یک عبارت، آن را در () قرار میدهیم. در حال حاضر تنها گروه ما در زیر باید `haa` باشد.",

  "steps.groupReference.title": "ارجاع (اشاره) به یک گروه",
  "steps.groupReference.description": "کلمات `ha` و `haa` در زیر گروه بندی شده اند. با نوشتن `\\1` گروه اول را صدا میزنیم و آن بخش را از بازنویسی دوباره بی نیاز میکنیم. در اینجا عدد `1` ترتیب گروه را نشان میدهد. برای اشاره به گروه دوم، در انتهاب عبارت، عبارت `\\2` را تایپ کنید. ",

  "steps.nonCapturingGrouping.title": "پرانتز `(?:)`: گروه‌بندی غیرقابل ارجاع",
  "steps.nonCapturingGrouping.description": "می توانید یک عبارت را گروه بندی کنید و اطمینان حاصل کنید که توسط مراجع ضبط نشده است. برای مثال در زیر دو گروه وجود دارد. با این حال، اولین گروه که با استفاده از `\\1` صدا زده میشود، در واقع گروه دوم است، زیرا گروه اول غیر قابل ارجاع (صدازدن) میباشد. ",

  "steps.pipeCharacter.title": "کاراکتر پایپ `|`",
  "steps.pipeCharacter.description": "نماد `|` معنیه <<یا>> در برنامه نویسی را میدهد و اجازه میدهد از چندین عبارت در یک الگو استفاده کنید. این نماد با لیست کارکتر `[abc]` متفاوت است، زیرا لیست کارکترها در سطح کارکتر عمل میکند، اما کارکتر پایپ در سطح الگو است. عبارت زیر هم `cat` و هم `rat` را انتخاب میکند. یک علامت پایپ دیگر به آخر الگو اضافه کنید تا عبارت `dog` را هم انتخاب کند.",

  "steps.escapeCharacter.title": "کاراکتر فرار `\\`",
  "steps.escapeCharacter.description": "کاراکترهای خاصی وجود دارد که هنگام نوشتن ریجکس از آنها استفاده می کنیم.برای اینکه بتوانیم از خود کارکتر های `{} [] / \\ + * . & ^ | ?` استفاده کنیم(دقیقا خود همان کارکتر بدون معنی آن)، باید از یک کارکتر فرار `\\` قبل از آن استفاده کنیم. برای مثال برای انتخاب خود کارکتر نقطه `.` و ستاره `*` در متن باید از کارکتر فرار `\\` استفاده کنید.",

  "steps.caret.title": "علامت هَت `^`:\\nانتخاب با شروع خط",
  "steps.caret.description": "ما از `[0-9]` برای یافتن اعداد استفاده می‌کردیم. برای پیدا کردن اعدادی که فقط اول خط هستند باید از علامت `^` قبل از شروع الگو استفاده کنیم.",

  "steps.dollar.title": "علامت دلار `$`:\\nانتخاب با پایان خط",
  "steps.dollar.description": "بیایید از علامت `$` بعد از مقدار `html` استفاده کنیم تا متون `html` را فقط در انتهای خط پیدا کنیم.",

  "steps.wordCharacter.title": "کاراکتر کلمه `\\w`: حرف، عدد و آندرلاین",
  "steps.wordCharacter.description": "عبارت `\\w` برای یافتن حروف انگلیسی، اعداد و کاراکترها زیرخط استفاده می شود. بیاید از علامت `\\w` برای پیدا کردن کلمات زیر استفاده کنیم.",

  "steps.withoutWordCharacter.title": "به جز کاراکتر کلمه `\\W`",
  "steps.withoutWordCharacter.description": "عبارت `\\W` برای یافتن کاراکترهایی غیر از حروف انگلیسی، اعداد و زیرخط استفاده می‌شود.",

  "steps.numberCharacter.title": "کاراکتر عددی `\\d`",
  "steps.numberCharacter.description": "عبارت `\\d` فقط برای یافتن کاراکترهای عددی استفاده می شود.",

  "steps.withoutNumberCharacter.title": "به جز کارکترهای عددی `\\D`",
  "steps.withoutNumberCharacter.description": "عبارت `\\D` برای یافتن کاراکترهای غیر عددی استفاده می شود.",

  "steps.spaceCharacter.title": "کاراکتر فضای خالی `\\s`",
  "steps.spaceCharacter.description": "عبارت `\\s` فقط برای یافتن کاراکترهای فاصله (فضای سفید) استفاده می شود.",

  "steps.withoutSpaceCharacter.title": "به جز فضای خالی `\\S`",
  "steps.withoutSpaceCharacter.description": "عبارت `\\S` برای یافتن کاراکترهای غیر فاصله (فضای سفید) استفاده می شود.",

  "steps.lookarounds.title": "جستجو کردن",
  "steps.lookarounds.description": "اگر می‌خواهیم عبارتی که می‌نویسیم قبل یا بعد از عبارت دیگری بیاید، باید از `Lookaround` استفاده کنیم.",

  "steps.positiveLookahead.title": "بررسی رو به جلو مثبت: `(?=)`",
  "steps.positiveLookahead.description": "برای مثال می خواهیم مقدار ساعت را در متن انتخاب کنیم. بنابراین، برای انتخاب فقط مقادیر عددی که بعد از آنها کمله `PM` قرار دارند، باید بررسی رو به جلو مثبت (Positive Lookahead) `(?=)` را بعد از عبارت خود بنویسیم. `PM` را بعد از علامت `=` داخل پرانتز قرار دهید.",

  "steps.negativeLookahead.title": "بررسی رو به جلو منفی: `(؟!)`",
  "steps.negativeLookahead.description": "برای مثال می خواهیم اعدادی غیر از مقدار ساعت را در متن انتخاب کنیم. بنابراین، باید بررسی رو به جلو منفی (Negative Lookahead) `(?!)` را بعد از عبارت خود بنویسیم تا فقط مقادیر عددی را انتخاب کنیم که بعد از آنها `PM` وجود ندارد. `PM` را بعد از علامت  `!` داخل پرانتز قرار دهید.",

  "steps.positiveLookbehind.title": "بررسی رو به عقب مثبت: `(?<=)`",
  "steps.positiveLookbehind.description": "برای مثال می خواهیم مقدار قیمت را در متن انتخاب کنیم. بنابراین، برای انتخاب فقط مقادیر عددی که بعد از علامت $ هستند، باید بررسی رو به عقب مثبت (Positive Lookbehind) `(?<=)` را قبل از عبارت خود بنویسیم. بعد از علامت `=` داخل پرانتز،  `\\$` را اضافه کنید.",

  "steps.negativeLookbehind.title": "بررسی رو به عقب منفی: `(?&lt;!)`",
  "steps.negativeLookbehind.description": "به عنوان مثال، می خواهیم در متن اعدادی غیر از مقدار قیمت انتخاب کنیم. بنابراین، برای انتخاب فقط مقادیر عددی که بعد از `$` نیستند، باید قبل از عبارت، بررسی رو به عقب منفی (Negative Lookbehind) `(?&lt;!)` را بنویسیم. بعد از علامت `!` داخل پرانتز `\\$` را اضافه کنید.",

  "steps.flags.title": "پرچم ها",
  "steps.flags.description": "پرچم ها خروجی عبارت را تغییر می دهند. به همین دلیل است که پرجم ها را اصلاح کننده (`modifiers`) نیز مینامند. پرچمها تعیین میکنند که آیا عبارت تایپ شده متن را به عنوان خطوط جداگانه در نظر میگیرد، به حروف کوچک و بزرگ حساس است و یا همه موارد تطابق را پیدا میکند یا خیر. برای یادگیری پرچم ها به مرحله بعدی بروید.",

  "steps.flagsGlobal.title": "پرچم جهانی",
  "steps.flagsGlobal.description": "پرچم جهانی (`global`) باعث می شود که ریجکس تمام موارد منطبق را پیدا کند. اگر از آن استفاده نشود، فقط اولین تطابق را برمیگرداند. اکنون پرچم جهانی را فعال کنید تا بتوانید همه موارد را انتخاب کنید.",

  "steps.flagsMultiline.title": "پرچم چند خطی",
  "steps.flagsMultiline.description": "ریجکس تمام متن را به صورت یک خط می بیند. اما ما از پرچم چند خطی (`multiline`) برای رسیدگی به هر خط به طور جداگانه استفاده می کنیم. به این ترتیب عباراتی که برای شناسایی الگوها در انتهای خطوط می نویسیم برای هر خط جداگانه کار می کنند. اکنون پرچم چند خطی را برای یافتن همه موارد منطبق فعال کنید.",

  "steps.flagsCaseInsensitive.title": "پرچم بدون حساسیت",
  "steps.flagsCaseInsensitive.description": "برای حذف حساسیت به حروف بزرگ . کوچک عبارتی که نوشته‌ایم، باید پرچم بدون حساسیت (`case-insensitive`) را فعال کنیم.",

  "steps.greedyMatching.title": "تطبیق حریصانه",
  "steps.greedyMatching.description": "ریجکس به طور پیش فرض یک مسابقه حریصانه انجام می دهد. این عبارت به این معناست که تطابق تا حد امکان طولانی خواهد بود. مثال زیر را بررسی کنید. این الگو به هر عبارتی اشاره دارد که به کارکتر `r` ختم میشود، و میتواند هر کارکتری قبل از آن باشد. اما در مثال زیر، الگوی ما در برخورد اول با کارکتر `r` متوقف نمیشود (حریصانه ادامه میدهد).",

  "steps.lazyMatching.title": "تطبیق تنبل",
  "steps.lazyMatching.description": "تطبیق تنبل، بر خلاف تطبیق حریصانه، در اولین تطابق متوقف می شود. به عنوان مثال در مثال زیر، یک `?` بعد از `*` برای پیدا کردن اولین تطابق که با حرف `r` ختم و قبل از هر کاراکتری وجود دارد مینویسیم. بنابراین این تطابق در برخورد اول با کارکتر `r` متوقف می شود.",

  "steps.completeAllSteps.title": "تبریک میگم، شما تمام مراحل را انجام داده اید!",
  "steps.completeAllSteps.description": "هر زمان که بخواهید می توانید به مراحل قبلی برگردید و به راحتی می توانید تمام مراحلی را که گذرانده اید طی کنید."
}